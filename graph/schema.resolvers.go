package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) Register(ctx context.Context, name string, email string, password string) (*model.AuthPayload, error) {
	// Koneksi ke MongoDB

	// Hash password sebelum disimpan
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}

	user, err := db.CreateUser(model.User{Email: email, Name: name, Password: string(hashedPassword)})
	if err != nil {
		return nil, err
	}

	// Generate JWT token
	token, err := GenerateToken(user.ID, user.Name, user.Email)
	if err != nil {
		return nil, err
	}

	// Kembalikan token dan user
	return &model.AuthPayload{
		Token: token,
		User:  user,
	}, nil
}
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	user := db.GetUser(email)

	err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password))
	if err != nil {
		fmt.Println("ini error ", err)
		return &model.AuthPayload{}, errors.New("Password salah")
	}
	token, err := GenerateToken(user.ID, user.Name, user.Email)
	if err != nil {
		return nil, err
	}

	return &model.AuthPayload{
		Token: token,
		User:  user,
	}, nil
}
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, email *string) (*model.User, error) {
	return db.UpdateUser(model.User{ID: id, Name: *name, Email: *email})
}
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	return db.DeleteUser(id)
}
func (r *mutationResolver) CreateProduct(ctx context.Context, name string, price float64, stock int32) (*model.Product, error) {
	user, _ := ctx.Value("user").(*model.User)
	return db.CreateProduct(model.Product{Name: name, Price: price, Stock: stock, CreatedBy: user.Name})
}
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, name *string, price *float64, stock *int32) (*model.Product, error) {
	user, _ := ctx.Value("user").(*model.User)

	return db.UpdateProduct(model.Product{ID: id, Name: *name, Price: *price, Stock: *stock, UpdatedBy: user.Name})
}
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	return db.DeleteProduct(id)
}
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	return db.GetUserById(id)
}
func (r *queryResolver) GetAllUsers(ctx context.Context) ([]*model.User, error) {
	return db.GetAllUsers()
}
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user, ok := ctx.Value("user").(*model.User)
	if !ok {
		return nil, errors.New("unauthenticated")
	}
	return user, nil
}
func (r *queryResolver) GetAllProducts(ctx context.Context, search string) ([]*model.Product, error) {
	return db.GetAllProducts()
}
*/
